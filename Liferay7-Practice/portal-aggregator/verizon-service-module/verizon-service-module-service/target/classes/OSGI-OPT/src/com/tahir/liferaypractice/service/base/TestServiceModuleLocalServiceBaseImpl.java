/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tahir.liferaypractice.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.tahir.liferaypractice.model.TestServiceModule;
import com.tahir.liferaypractice.service.TestServiceModuleLocalService;
import com.tahir.liferaypractice.service.persistence.TestServiceModulePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the test service module local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.tahir.liferaypractice.service.impl.TestServiceModuleLocalServiceImpl}.
 * </p>
 *
 * @author Tahir
 * @see com.tahir.liferaypractice.service.impl.TestServiceModuleLocalServiceImpl
 * @see com.tahir.liferaypractice.service.TestServiceModuleLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TestServiceModuleLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements TestServiceModuleLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.tahir.liferaypractice.service.TestServiceModuleLocalServiceUtil} to access the test service module local service.
	 */

	/**
	 * Adds the test service module to the database. Also notifies the appropriate model listeners.
	 *
	 * @param testServiceModule the test service module
	 * @return the test service module that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TestServiceModule addTestServiceModule(
		TestServiceModule testServiceModule) {
		testServiceModule.setNew(true);

		return testServiceModulePersistence.update(testServiceModule);
	}

	/**
	 * Creates a new test service module with the primary key. Does not add the test service module to the database.
	 *
	 * @param testServiceModuleId the primary key for the new test service module
	 * @return the new test service module
	 */
	@Override
	public TestServiceModule createTestServiceModule(long testServiceModuleId) {
		return testServiceModulePersistence.create(testServiceModuleId);
	}

	/**
	 * Deletes the test service module with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param testServiceModuleId the primary key of the test service module
	 * @return the test service module that was removed
	 * @throws PortalException if a test service module with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TestServiceModule deleteTestServiceModule(long testServiceModuleId)
		throws PortalException {
		return testServiceModulePersistence.remove(testServiceModuleId);
	}

	/**
	 * Deletes the test service module from the database. Also notifies the appropriate model listeners.
	 *
	 * @param testServiceModule the test service module
	 * @return the test service module that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TestServiceModule deleteTestServiceModule(
		TestServiceModule testServiceModule) {
		return testServiceModulePersistence.remove(testServiceModule);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TestServiceModule.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return testServiceModulePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.tahir.liferaypractice.model.impl.TestServiceModuleModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return testServiceModulePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.tahir.liferaypractice.model.impl.TestServiceModuleModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return testServiceModulePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return testServiceModulePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return testServiceModulePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TestServiceModule fetchTestServiceModule(long testServiceModuleId) {
		return testServiceModulePersistence.fetchByPrimaryKey(testServiceModuleId);
	}

	/**
	 * Returns the test service module matching the UUID and group.
	 *
	 * @param uuid the test service module's UUID
	 * @param groupId the primary key of the group
	 * @return the matching test service module, or <code>null</code> if a matching test service module could not be found
	 */
	@Override
	public TestServiceModule fetchTestServiceModuleByUuidAndGroupId(
		String uuid, long groupId) {
		return testServiceModulePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the test service module with the primary key.
	 *
	 * @param testServiceModuleId the primary key of the test service module
	 * @return the test service module
	 * @throws PortalException if a test service module with the primary key could not be found
	 */
	@Override
	public TestServiceModule getTestServiceModule(long testServiceModuleId)
		throws PortalException {
		return testServiceModulePersistence.findByPrimaryKey(testServiceModuleId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(com.tahir.liferaypractice.service.TestServiceModuleLocalServiceUtil.getService());
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TestServiceModule.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("testServiceModuleId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(com.tahir.liferaypractice.service.TestServiceModuleLocalServiceUtil.getService());
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(TestServiceModule.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"testServiceModuleId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(com.tahir.liferaypractice.service.TestServiceModuleLocalServiceUtil.getService());
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TestServiceModule.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("testServiceModuleId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<TestServiceModule>() {
				@Override
				public void performAction(TestServiceModule testServiceModule)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						testServiceModule);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(TestServiceModule.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return testServiceModuleLocalService.deleteTestServiceModule((TestServiceModule)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return testServiceModulePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the test service modules matching the UUID and company.
	 *
	 * @param uuid the UUID of the test service modules
	 * @param companyId the primary key of the company
	 * @return the matching test service modules, or an empty list if no matches were found
	 */
	@Override
	public List<TestServiceModule> getTestServiceModulesByUuidAndCompanyId(
		String uuid, long companyId) {
		return testServiceModulePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of test service modules matching the UUID and company.
	 *
	 * @param uuid the UUID of the test service modules
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of test service modules
	 * @param end the upper bound of the range of test service modules (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching test service modules, or an empty list if no matches were found
	 */
	@Override
	public List<TestServiceModule> getTestServiceModulesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<TestServiceModule> orderByComparator) {
		return testServiceModulePersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the test service module matching the UUID and group.
	 *
	 * @param uuid the test service module's UUID
	 * @param groupId the primary key of the group
	 * @return the matching test service module
	 * @throws PortalException if a matching test service module could not be found
	 */
	@Override
	public TestServiceModule getTestServiceModuleByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return testServiceModulePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the test service modules.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.tahir.liferaypractice.model.impl.TestServiceModuleModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of test service modules
	 * @param end the upper bound of the range of test service modules (not inclusive)
	 * @return the range of test service modules
	 */
	@Override
	public List<TestServiceModule> getTestServiceModules(int start, int end) {
		return testServiceModulePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of test service modules.
	 *
	 * @return the number of test service modules
	 */
	@Override
	public int getTestServiceModulesCount() {
		return testServiceModulePersistence.countAll();
	}

	/**
	 * Updates the test service module in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param testServiceModule the test service module
	 * @return the test service module that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TestServiceModule updateTestServiceModule(
		TestServiceModule testServiceModule) {
		return testServiceModulePersistence.update(testServiceModule);
	}

	/**
	 * Returns the test service module local service.
	 *
	 * @return the test service module local service
	 */
	public TestServiceModuleLocalService getTestServiceModuleLocalService() {
		return testServiceModuleLocalService;
	}

	/**
	 * Sets the test service module local service.
	 *
	 * @param testServiceModuleLocalService the test service module local service
	 */
	public void setTestServiceModuleLocalService(
		TestServiceModuleLocalService testServiceModuleLocalService) {
		this.testServiceModuleLocalService = testServiceModuleLocalService;
	}

	/**
	 * Returns the test service module persistence.
	 *
	 * @return the test service module persistence
	 */
	public TestServiceModulePersistence getTestServiceModulePersistence() {
		return testServiceModulePersistence;
	}

	/**
	 * Sets the test service module persistence.
	 *
	 * @param testServiceModulePersistence the test service module persistence
	 */
	public void setTestServiceModulePersistence(
		TestServiceModulePersistence testServiceModulePersistence) {
		this.testServiceModulePersistence = testServiceModulePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.tahir.liferaypractice.model.TestServiceModule",
			testServiceModuleLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.tahir.liferaypractice.model.TestServiceModule");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TestServiceModuleLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return TestServiceModule.class;
	}

	protected String getModelClassName() {
		return TestServiceModule.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = testServiceModulePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.tahir.liferaypractice.service.TestServiceModuleLocalService.class)
	protected TestServiceModuleLocalService testServiceModuleLocalService;
	@BeanReference(type = TestServiceModulePersistence.class)
	protected TestServiceModulePersistence testServiceModulePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}